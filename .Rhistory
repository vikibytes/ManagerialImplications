raw.traindata <- read.csv(file = "rawData/train.csv")
raw.storedata <- read.csv(file = 'rawData/store.csv')
library(dplyr)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/msleep_ggplot2.csv"
filename <- "msleep_ggplot2.csv"
if (!file.exists(filename)) download(url,filename)
msleep <- read.csv("https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/msleep_ggplot2.csv")
head(msleep)
names(msleep)
sleepData <- select(.data = msleep, name, sleep_total)
head(select(msleep, -name))
View(msleep)
View(msleep)
install.packages("data.table")
model1 <- lm(formula = Sales~Customers, data = raw.traindata)
summary(model1)
install.packages("forecast")
source('myLibs.R')
source('myLibs.R')
test <- fread(input = "rawData/test.csv")
train <- fread("rawData/train.csv")
store <- fread("rawData/store.csv")
str(train)
str(store)
train[, Date := as.Date(Date)]
test[, Date := as.Date(Date)]
str(train)
str(test)
summary(train)
summary(train)
summary(train)
str(train)
summary(test)
test[is.na(test$Open)]
test[is.na(test)]
train[is.na(train)]
train[is.na(train[[1]])]
train[is.na(train[[2]])]
train[is.na(train[[2,1]])]
train[is.na(train[1)]
train[is.na(train[1])]
hist(train$Sales, 100)
plot(train$Date, type = 'h')
plot(train$Date, type = '1')
plot(train$Date, type = '1')
plot(train$Date, type = '1')
# 0. Loading required libraries ----
source('myLibs.R')
# 1. Let's import datasets ----
# raw.traindata <- read.csv(file = "rawData/train.csv")
# raw.storedata <- read.csv(file = 'rawData/store.csv')
test <- fread(input = "rawData/test.csv")
train <- fread("rawData/train.csv")
store <- fread("rawData/store.csv")
# 2. Data exploration and cleaning ----
str(train)
str(test)
# 2.1 Convert Date column to Date format ----
train[, Date := as.Date(Date)]
test[, Date := as.Date(Date)]
summary(train)
summary(test)
hist(train$Sales, 100)
# 2.2 sort data by Date
train <- train[order(Date)]
test <- test[order(Date)]
summary(train)
#2.3 Checking NA's blanks
sum(is.na(test$Open))
test[is.na(test)] <- 1
train[, lapply(.SD, function(x) length(unique(x)))]
test[, lapply(.SD, function(x) length(unique(x)))]
# All test stores are also in the train data
sum(unique(test$Store) %in% unique(train$Store))
# 259 train stores are not in the test data
sum(!(unique(train$Store) %in% unique(test$Store)))
table(train$Open) / nrow(train) # Percent Open Train
table(test$Open) / nrow(test) # Percent Open Test
table(train$Promo) / nrow(train) # Percent of the time promo in train
table(test$Promo) / nrow(test) # Percent of the time promo in test
table(train$StateHoliday) / nrow(train) # Percent of the time holiday in train
table(test$StateHoliday) / nrow(test) # no b and c = no easter holiday and no christmas
table(train$SchoolHoliday) / nrow(train) # Percent of the time school holiday in train
table(test$SchoolHoliday) / nrow(test) # Percent of the time school holiday in test
plot(train$Date, type = '1')
plot(train$Date, type = 'l')
plot(test$Date, type = "l")
(table(test$Date) == 856)
sum(table(test$Date) == 856)
hist(train$Sales, 100)
hist(train$Sales, 10)
hist(train$Sales, 50)
hist(aggregate(train[Sales != 0]$Sales,
by = list(train[Sales != 0]$Store), mean)$x, 100,
main = "Mean sales per store when store was not closed")
hist(aggregate(train[Sales != 0]$Customers,
by = list(train[Sales != 0]$Store), mean)$x, 100,
main = "Mean customers per store when store was not closed")
ggplot(train[train$Sales != 0 & train$Customers != 0],
aes(x = log(Customers), y = log(Sales))) +
geom_point(alpha = 0.2) + geom_smooth()
ggplot(train[train$Sales != 0 & train$Customers != 0],
aes(x = log(Customers), y = log(Sales))) +
geom_point(alpha = 0.2) + geom_smooth()
temp <- train
temp <- train
temp$year <- format(temp$Date, "%Y")
temp$month <- format(temp$Date, "%m")
temp[, StoreMean := mean(Sales), by = Store]
temp <- temp[, .(MonthlySalesMean = mean(Sales / (StoreMean)) * 100), by = .(year, month)]
temp <- as.data.frame(temp)
SalesTS <- ts(temp$MonthlySalesMean, start=2013, frequency=12)
col = rainbow(3)
seasonplot(SalesTS, col=col, year.labels.left = TRUE, pch=19, las=1)
library(lattice)
attach(mtcars)
gear <- factor(gear, levels=c(3, 4, 5),
labels=c("3 gears", "4 gears", "5 gears"))
cyl <- factor(cyl, levels=c(4, 6, 8),
labels=c("4 cylinders", "6 cylinders", "8 cylinders"))
densityplot(~mpg,
main="Density Plot",
xlab="Miles per Gallon")
densityplot(~mpg | cyl,
main="Density Plot by Number of Cylinders",
xlab="Miles per Gallon")
bwplot(cyl ~ mpg | gear,
main="Box Plots by Cylinders and Gears",
xlab="Miles per Gallon", ylab="Cylinders")
xyplot(mpg ~ wt | cyl * gear,
main="Scatter Plots by Cylinders and Gears",
xlab="Car Weight", ylab="Miles per Gallon")
cloud(mpg ~ wt * qsec | cyl,
main="3D Scatter Plots by Cylinders")
dotplot(cyl ~ mpg | gear,
main="Dot Plots by Number of Gears and Cylinders",
xlab="Miles Per Gallon")
splom(mtcars[c(1, 3, 4, 5, 6)],
main="Scatter Plot Matrix for mtcars Data")
detach(mtcars)
displacement <- equal.count(mtcars$disp, number=3, overlap=0)
xyplot(mpg~wt|displacement, data=mtcars,
main = "Miles per Gallon vs. Weight by Engine Displacement",
xlab = "Weight", ylab = "Miles per Gallon",
layout=c(3, 1), aspect=1.5)
library(lattice)
displacement <- equal.count(mtcars$disp, number=3, overlap=0)
mypanel <- function(x, y) {
panel.xyplot(x, y, pch=19)
panel.rug(x, y)
panel.grid(h=-1, v=-1)
panel.lmline(x, y, col="red", lwd=1, lty=2)
}
xyplot(mpg~wt|displacement, data=mtcars,
layout=c(3, 1),
aspect=1.5,
main = "Miles per Gallon vs. Weight by Engine Displacement",
xlab = "Weight",
ylab = "Miles per Gallon",
panel = mypanel)
mtcars$transmission <- factor(mtcars$am, levels=c(0,1),
labels=c("Automatic", "Manual"))
panel.smoother <- function(x, y) {
panel.grid(h=-1, v=-1)
panel.xyplot(x, y)
panel.loess(x, y)
panel.abline(h=mean(y), lwd=2, lty=2, col="darkgreen")
}
xyplot(mpg~disp|transmission,data=mtcars,
scales=list(cex=.8, col="red"),
panel=panel.smoother,
xlab="Displacement", ylab="Miles per Gallon",
main="MPG vs Displacement by Transmission Type",
sub = "Dotted lines are Group Means", aspect=1)
mtcars$transmission <- factor(mtcars$am, levels=c(0, 1),
labels=c("Automatic", "Manual"))
densityplot(~mpg, data=mtcars,
group=transmission,
main="MPG Distribution by Transmission Type",
xlab="Miles per Gallon",
auto.key=TRUE)
demo()
demo(Hershey)
demo(plotmath)
demo(graphics)
demo(glm.vr)
library(tidyverse)
source('myLibs.R')
test <- fread(input = "rawData/test.csv")
train <- fread("rawData/train.csv")
store <- fread("rawData/store.csv")
str(train)
str(test)
train[, Date := as.Date(Date)]
test[, Date := as.Date(Date)]
summary(train)
summary(test)
train <- train[order(Date)]
test <- test[order(Date)]
summary(train)
sum(is.na(test$Open))
test[is.na(test)] <- 1
train[, lapply(.SD, function(x) length(unique(x)))]
test[, lapply(.SD, function(x) length(unique(x)))]
sum(unique(test$Store) %in% unique(train$Store))
sum(!(unique(train$Store) %in% unique(test$Store)))
table(train$Open) / nrow(train) # Percent Open Train
table(test$Open) / nrow(test) # Percent Open Test
table(train$Promo) / nrow(train) # Percent of the time promo in train
table(test$Promo) / nrow(test) # Percent of the time promo in test
table(train$StateHoliday) / nrow(train) # Percent of the time holiday in train
table(test$StateHoliday) / nrow(test) # no b and c = no easter holiday and no christmas
table(train$SchoolHoliday) / nrow(train) # Percent of the time school holiday in train
table(test$SchoolHoliday) / nrow(test) # Percent of the time school holiday in test
plot(train$Date, type = 'l')
plot(test$Date, type = "l")
hist(aggregate(train[Sales != 0]$Sales,
by = list(train[Sales != 0]$Store), mean)$x, 100,
main = "Mean sales per store when store was not closed")
hist(aggregate(train[Sales != 0]$Customers,
by = list(train[Sales != 0]$Store), mean)$x, 100,
main = "Mean customers per store when store was not closed")
temp <- train
temp$year <- format(temp$Date, "%Y")
temp$month <- format(temp$Date, "%m")
temp[, StoreMean := mean(Sales), by = Store]
temp <- temp[, .(MonthlySalesMean = mean(Sales / (StoreMean)) * 100), by = .(year, month)]
temp <- as.data.frame(temp)
SalesTS <- ts(temp$MonthlySalesMean, start=2013, frequency=12)
col = rainbow(3)
seasonplot(SalesTS, col=col, year.labels.left = TRUE, pch=19, las=1)
hist(aggregate(train[Sales != 0]$Sales,
by = list(train[Sales != 0]$Store), mean)$x, 100,
main = "Mean sales per store when store was not closed")
hist(aggregate(train[Sales != 0]$Sales,
by = list(train[Sales != 0]$Store), mean)$x, 100,
main = "Mean sales per store when store was not closed")
hist(aggregate(train[Sales != 0]$Sales,
by = list(train[Sales != 0]$Store), mean)$x, 100,
main = "Mean sales per store when store was not closed")
hist(aggregate(train[Sales != 0]$Customers,
by = list(train[Sales != 0]$Store), mean)$x, 100,
main = "Mean customers per store when store was not closed")
temp <- train
train <- read.csv("train.csv", header = T)
test <- read.csv("test.csv", header = T)
store <- read.csv("store.csv")
train <- merge(train,store)
test <- merge(test,store)
ajeita_pa_mim <- function(dt){
# replacing NA's by the mean value
dt$CompetitionDistance[is.na(dt$CompetitionDistance)] = round(mean(dt$CompetitionDistance, na.rm = T))
dt$CompetitionOpenSinceMonth[is.na(dt$CompetitionOpenSinceMonth)] = round(mean(dt$CompetitionOpenSinceMonth, na.rm = T))
dt$CompetitionOpenSinceYear[is.na(dt$CompetitionOpenSinceYear)] = round(mean(dt$CompetitionOpenSinceYear, na.rm = T))
dt$Promo2SinceWeek[is.na(dt$Promo2SinceWeek)] = round(mean(dt$Promo2SinceWeek, na.rm = T))
dt$Promo2SinceYear[is.na(dt$Promo2SinceYear)] = round(mean(dt$Promo2SinceYear, na.rm = T))
dt$Open[is.na(dt$Open)] = round(mean(dt$Open, na.rm = T))
# converting to numeric
dt$StateHoliday = as.numeric(dt$StateHoliday)
dt$StoreType = as.numeric(dt$StoreType)
dt$Assortment = as.numeric(dt$Assortment)
dt$PromoInterval = as.numeric(dt$PromoInterval)
# seperating out the elements of the date column for the dt set
dt$Date = as.Date(dt$Date, format = "%Y-%m-%d")
dt$month <- as.integer(format(dt$Date, "%m"))
dt$year <- as.integer(format(dt$Date, "%y"))
dt$day <- as.integer(format(dt$Date, "%d"))
# removing the date columns (Date not used) (Customers affect simetry) (CompetitionOpenSinceYear not relevant/correlated)
dt$Date = NULL
dt$Customers = NULL
dt$CompetitionOpenSinceYear = NULL
return(dt)
}
train = ajeita_pa_mim(train)
test = ajeita_pa_mim(test)
cor(train)
mod = lm(Sales ~ ., data = train)
summary(mod)
y = predict(mod, newdata = test)
myTest <- predict(mod, newdata = train)
myTest <- predict(mod, newdata = train)
submission <- data.frame(Id=test$Id, Sales=y)
train$pred_Sales <- myTest
write.csv(submission, "lm.csv", row.names = F, quote = F)
write.csv(train, "Vikas.csv", row.names = F, quote = F)
names(train)
vikas2 <- c("Store","Sales","pred_sales")
train[vikas2]
train[,vikas2]
head(train, 100)
head(train, 100)
